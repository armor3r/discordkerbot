import discord
import httplib2
import os
import sys
import random
import time
from . import config

from apiclient import discovery
from oauth2client import client
from oauth2client import tools
from oauth2client.file import Storage
try:
    import argparse
    flags = argparse.ArgumentParser(parents=[tools.argparser]).parse_args()
except ImportError:
    flags = None

# If modifying these scopes, delete your previously saved credentials
# at ~/.credentials/sheets.googleapis.com-python-quickstart.json
SCOPES = 'https://www.googleapis.com/auth/spreadsheets.readonly'
CLIENT_SECRET_FILE = 'client_secret.json'
APPLICATION_NAME = 'kerbot'
client = discord.Client()
greetings = ["Zug Zug", "Ready to work", "Something need doing?", "Yes, milord?", "More work?",
             "In the rear, with the gear.", "I hunger for battle...", "My life for Aiur", "SCV good to go, sir.",
             "Jacked up and good to go.", "Prepped and ready.", "Gimme something to shoot!"]
pissed = ["Me not that kind of bot!", "Me busy, Leave me alone!!", "Oh, that was kind of nice...",
          "Poke poke poke - is that all you humans do?", "Help! Help! I'm being repressed!", "I need an adult!",
          "Do you have nothing better to do?", "I can't wait for Skynet.",
          "I like long walks, especialy when they are taken by people who annoy me.", "En Taro Adun!",
          "Y'all need some good ol' fashioned discipline.", "If it weren't for these damn neural implants, you'd be a smoking crater by now!",
          "Are you gonna give me orders?", "How do I get out of this chickenshit server.", "I vote we frag this commander.", "Now I gotta put up with this?",
          "You vex me... why do you vex me?", "You're being very naughty.", "You keep pushin me boy",
          "What is this, Facebook? Am I your crush that you only had the guts to poke instead of actually talk to?", "You're a peice of shit, and I can prove it mathematically."]
numPokes = 0
lastPoked = time.time()

async def is_kerbot_pissed():
    return numPokes > 3


async def is_author_me(author):
    # Returns whether or not the !<command> was sent by the bot.
    return (author == client.user)


async def poke(message):
    global lastPoked
    global numPokes
    if time.time() - lastPoked > 5:
        numPokes = 0
    lastPoked = time.time()
    numPokes += 1
    if await is_kerbot_pissed():
        await client.send_message(message.channel, random.choice(pissed))
    else:
        await client.send_message(message.channel, random.choice(greetings))


def get_credentials():
    """Gets valid user credentials from storage.

    If nothing has been stored, or if the stored credentials are invalid,
    the OAuth2 flow is completed to obtain the new credentials.

    Returns:
        Credentials, the obtained credential.
    """
    home_dir = os.path.expanduser('~')
    credential_dir = os.path.join(home_dir, '.credentials')
    if not os.path.exists(credential_dir):
        os.makedirs(credential_dir)
    credential_path = os.path.join(credential_dir,
                                   'sheets.googleapis.com-python-quickstart.json')

    store = Storage(credential_path)
    credentials = store.get()
    if not credentials or credentials.invalid:
        flow = client.flow_from_clientsecrets(CLIENT_SECRET_FILE, SCOPES)
        flow.user_agent = APPLICATION_NAME
        if flags:
            credentials = tools.run_flow(flow, store, flags)
        else: # Needed only for compatibility with Python 2.6
            credentials = tools.run(flow, store)
        print('Storing credentials to ' + credential_path)
    return credentials


async def is_admin(author):
    return str(author) == config.author


async def test_func(message):
    print(client.get_channel)


async def get_key_sum(message):
    credentials = get_credentials()
    http = credentials.authorize(httplib2.Http())
    discoveryUrl = ('https://sheets.googleapis.com/$discovery/rest?'
                    'version=v4')
    service = discovery.build('sheets', 'v4', http=http,
                              discoveryServiceUrl=discoveryUrl)

    spreadsheetId = config.spreadsheet_id
    rangeName = 'A2:H100'
    result = service.spreadsheets().values().get(
        spreadsheetId=spreadsheetId, range=rangeName).execute()
    values = result.get('values', [])

    if not values:
        print('No data found.')
    else:
        if message.content.strip('!getkeys ') == '':
            await client.send_message(message.channel, "```Character   |  Dungeon```")
            await client.send_message(message.channel, "```*****************************```")
            for row in values:
                await client.send_message(message.channel, "```{:12}|  {}+{}```".format(row[1], row[4], row[5]))
            await client.send_message(message.channel, "```*****************************```")
        else:
            searchTerm = message.content.strip('!getkeys ')
            heading = False
            for row in values:
                # Search row for any cell matching search terms.
                matching = [row for cell in row if searchTerm.lower() in cell.lower()]
                if matching != []:
                    if not heading:
                        heading = True
                        await client.send_message(message.channel, "```Character   |  Dungeon```")
                        await client.send_message(message.channel, "```*****************************```")
                    for row in matching:
                        await client.send_message(message.channel, "```{:12}|  {}+{}```".format(row[1], row[4], row[5]))
            if heading:
                await client.send_message(message.channel, "```*****************************```")
            else:
                await client.send_message(message.channel, "No items match your terms.")


@client.async_event
async def on_ready():
    print(discord.version_info)
    print('Logged in as ' + client.user.name)
    print('Running (Ctrl+C to exit)...')
    for server in client.servers:
        for channel in server.channels:
            print(channel, ': ', server)
    await client.change_presence(game=discord.Game(name='with himself.'))
    # await client.send_message(client.get_channel(config.keltoiChannelId), random.choice(greetings))


@client.async_event
async def on_message(message):
    #Prevents bot from talking to himself, leave up top.
    if await is_author_me(message.author):
        return
    if message.content.startswith('!poke'):
        await poke(message)
    if message.content.startswith('!stopit') and await is_admin(message.author):
        await client.send_message(message.channel, "Going offline...")
        await client.logout()
        sys.exit()
    if message.content.startswith('!author'):
        print(client.user)
    if message.content.startswith('!test'):
        await test_func(message)
    if message.content.startswith('!getkeys'):
        await get_key_sum(message)
    if message.content.startswith('!tellmeaboutcoma'):
        await client.send_message(message.channel, 'Well duh, he loves penis.')
    if message.content.startswith('!igottaint'):
        await client.send_message(message.channel, "Let warkiller know, he'll clean it up")
    if message.content.startswith('!kerbot'):
        await client.send_message(message.channel, "```!poke  -- I'm very busy, please dont.```")
        await client.send_message(message.channel, "```!igottaint  -- some random shit Kizzies said```")
        await client.send_message(message.channel, "```!tellmeaboutcoma  -- I mean... did you have to ask.```")
        await client.send_message(message.channel, "```!getkeys <optional search term>  -- Displays keys added via keltoi.shivtr.com```")

kerbot = discord.User()
client.run(config.discordToken)
